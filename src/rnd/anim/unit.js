import { primitive, ubo_buffer } from "../res/resurses.js";
import { matr4, vec3 } from "../../../mth/mth.js";

//BindPoints:
//gradientSquereTime = 0;
//mondelbrotPrecalcAtr = 1;
//projSquareWorldMatrix = 2;

/////////////
///ProjSquare
/////////////

class ProjSquare {
  init() {
    let pos = [
      [1, -1, 0],
      [-1, -1, 0],
      [1, 1, 0],
      [-1, 1, 0],
    ];
    const ind = [0, 1, 2, 3];
    this.prim = primitive("projsquare", ind, pos);
    this.matrW = matr4();
  }

  response() {
    let time;

    let date = new Date();
    time = date.getSeconds() * 1000 + date.getMilliseconds();

    let matrR = matr4();
    matrR.mulMatr(matr4().scale(vec3(0.5)));

    matrR.mulMatr(matr4().rotate(Math.sin(time * 0.001) * 0.1, vec3(0, 1, 0)));
    this.matrW = matrR;
  }
}

/* тетраэдер икосаэдер куб додекаэдер октаэдер */

///////
///Cube
///////

class Platonth {
  init() {
    let pos = [
      [0.3902734644166456, 0.6314757303333053, -0.28355026945068],
      [-0.14907119849998599, 0.6314757303333053, -0.4587939734903912],
      [-0.48240453183331927, 0.6314757303333053, 0],
      [-0.14907119849998599, 0.6314757303333053, 0.4587939734903912],
      [0.3902734644166456, 0.6314757303333053, 0.28355026945068],
      [0.6314757303333053, 0.14907119849998599, -0.4587939734903912],
      [0.24120226591665964, -0.14907119849998599, -0.7423442429410713],
      [-0.24120226591665964, 0.14907119849998599, -0.7423442429410713],
      [-0.6314757303333053, -0.14907119849998599, -0.4587939734903912],
      [-0.7805469288332912, 0.14907119849998599, 0],
      [-0.6314757303333053, -0.14907119849998599, 0.4587939734903912],
      [-0.24120226591665964, 0.14907119849998599, 0.7423442429410713],
      [0.24120226591665964, -0.14907119849998599, 0.7423442429410713],
      [0.6314757303333053, 0.14907119849998599, 0.4587939734903912],
      [0.7805469288332914, -0.14907119849998599, 0],
      [0.14907119849998599, -0.6314757303333053, 0.4587939734903912],
      [-0.3902734644166456, -0.6314757303333053, 0.28355026945068],
      [-0.3902734644166456, -0.6314757303333053, -0.28355026945068],
      [0.14907119849998599, -0.6314757303333053, -0.4587939734903912],
      [0.48240453183331927, -0.6314757303333053, 0],
    ];

    const ind = [
      0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 13, 0, 13, 14, 0, 14, 5, 0, 5, 6, 0, 6,
      7, 0, 7, 1, 8, 9, 2, 8, 2, 1, 8, 1, 7, 8, 7, 6, 8, 6, 18, 8, 18, 17, 8,
      17, 16, 8, 16, 10, 8, 10, 9, 11, 3, 2, 11, 2, 9, 11, 9, 10, 11, 10, 16,
      11, 16, 15, 11, 15, 12, 11, 12, 13, 11, 13, 4, 11, 4, 3, 19, 14, 13, 19,
      13, 12, 19, 12, 15, 19, 18, 6, 19, 6, 5, 19, 5, 14, 19, 15, 16, 19, 16,
      17, 19, 17, 18,
    ];

    this.prim = primitive("Platonth", ind, pos);
    this.matrW = matr4();
    this.drawType = gl.TRIANGLES;
  }

  response() {
    let time;

    let date = new Date();
    time = date.getSeconds() * 1000 + date.getMilliseconds();

    let matrR = matr4();
    matrR.mulMatr(matr4().scale(vec3(0.9)));

    matrR.mulMatr(matr4().rotate(Math.sin(time * 0.001) * 0.1, vec3(0, 1, 0)));
    this.matrW = matrR;
  }
}

//////////////////
///exportetd class
//////////////////
class _units {
  unitsArray = [];

  init() {
    this.unitsArray.push(new Platonth());
  }
}

export function units(...arg) {
  return new _units(...arg);
}
